// 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫
require('dotenv').config(); // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º!)
const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const axios = require('axios');

// 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Render
const app = express();
const PORT = process.env.PORT || 10000; // Render —Ç—Ä–µ–±—É–µ—Ç –ø–æ—Ä—Ç 10000

app.get('/', (req, res) => res.send('Book Club Bot is running!'));
app.get('/ping', (req, res) => res.send('Pong!'));

app.listen(PORT, '0.0.0.0', () => {
  console.log(`Server started on port ${PORT}`);
});

// 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const token = process.env.TELEGRAM_BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });

// 4. –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
const botState = {
  genrePoll: null,
  bookSuggestions: {},
  bookPoll: null,
  timers: {},
  userSuggestions: {},
};

// 5. –ñ–∞–Ω—Ä—ã —Å —ç–º–æ–¥–∑–∏
const genres = [
  'üöÄ –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞',
  'üßô –§—ç–Ω—Ç–µ–∑–∏',
  'üïµÔ∏è –î–µ—Ç–µ–∫—Ç–∏–≤',
  'üî™ –¢—Ä–∏–ª–ª–µ—Ä',
  'üíò –†–æ–º–∞–Ω',
  'üëª –£–∂–∞—Å—ã',
  'üè∞ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π',
  'üìú –ë–∏–æ–≥—Ä–∞—Ñ–∏—è',
  'üî¨ –ù–∞—É—á–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞',
  'üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è',
  '‚úíÔ∏è –ü–æ—ç–∑–∏—è',
  'üó∫Ô∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è'
];

// 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const name = msg.from.first_name;
  
  bot.sendMessage(chatId, `üìö <b>–ü—Ä–∏–≤–µ—Ç, ${name}!</b> –Ø –±–æ—Ç –∫–Ω–∏–∂–Ω–æ–≥–æ –∫–ª—É–±–∞.\n\n` +
    '‚ú® <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n' +
    '/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n' +
    '/selectgenre - –í—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä –∫–Ω–∏–≥–∏\n' +
    '/help - –ü–æ–º–æ—â—å\n\n' +
    'üìù <i>–ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –∫–Ω–∏–≥–∏ –≤ –õ–° –±–æ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</i>\n' +
    '<code>–ê–≤—Ç–æ—Ä - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏</code>', {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üöÄ –í—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä', callback_data: 'select_genre' }],
        [{ text: 'üìú –ü—Ä–∞–≤–∏–ª–∞', callback_data: 'show_rules' }]
      ]
    }
  });
});

// 7. –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
bot.on('callback_query', (query) => {
  const chatId = query.message.chat.id;
  
  if (query.data === 'select_genre') {
    bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /selectgenre –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ');
  }
  else if (query.data === 'show_rules') {
    bot.sendMessage(chatId, 'üìú <b>–ü—Ä–∞–≤–∏–ª–∞ –∫–Ω–∏–∂–Ω–æ–≥–æ –∫–ª—É–±–∞:</b>\n\n' +
      '1. –ú–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞\n' +
      '2. –§–æ—Ä–º–∞—Ç: "–ê–≤—Ç–æ—Ä - –ö–Ω–∏–≥–∞"\n' +
      '3. –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç—Å—è 5 –º–∏–Ω—É—Ç\n' +
      '4. –î–µ—Ç—Å–∫–∏–µ –∏ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ –∫–Ω–∏–≥–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è', {
      parse_mode: 'HTML'
    });
  }
});

// 8. –ö–æ–º–∞–Ω–¥–∞ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞
bot.onText(/\/selectgenre/, (msg) => {
  const chatId = msg.chat.id;
  
  if (botState.genrePoll) {
    return bot.sendMessage(chatId, '‚ùå –û–ø—Ä–æ—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω!');
  }

  bot.sendPoll(
    chatId,
    'üìö –í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∫–Ω–∏–≥–∏:',
    genres,
    { is_anonymous: false, allows_multiple_answers: false }
  ).then(poll => {
    botState.genrePoll = {
      id: poll.poll.id,
      chatId: chatId,
      messageId: poll.message_id
    };

    botState.timers.genrePoll = setTimeout(() => {
      closeGenrePoll(chatId);
    }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç

    bot.sendMessage(chatId, '‚è≥ –£ –≤–∞—Å –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç –Ω–∞ –≤—ã–±–æ—Ä –∂–∞–Ω—Ä–∞!');
  }).catch(err => {
    console.error('Poll error:', err);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞');
  });
});

// 9. –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–ø—Ä–æ—Å–∞ –∂–∞–Ω—Ä–æ–≤
function closeGenrePoll(chatId) {
  if (!botState.genrePoll) return;

  clearTimeout(botState.timers.genrePoll);
  
  bot.stopPoll(botState.genrePoll.chatId, botState.genrePoll.messageId)
    .then(poll => {
      let maxVotes = 0;
      let selectedGenre = '';
      
      poll.options.forEach((option, index) => {
        if (option.voter_count > maxVotes) {
          maxVotes = option.voter_count;
          selectedGenre = genres[index];
        }
      });

      const message = maxVotes > 0 
        ? `üéâ –í—ã–±—Ä–∞–Ω –∂–∞–Ω—Ä: ${selectedGenre}!\n–¢–µ–ø–µ—Ä—å –ø—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –∫–Ω–∏–≥–∏ –≤ –õ–° –±–æ—Ç–∞.`
        : '‚ùå –ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª!';
        
      bot.sendMessage(chatId, message);
      
      if (maxVotes > 0) {
        startBookCollection(chatId, selectedGenre);
      }
    })
    .finally(() => {
      botState.genrePoll = null;
    });
}

// 10. –°–±–æ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∫–Ω–∏–≥
function startBookCollection(chatId, genre) {
  botState.bookSuggestions = {
    chatId: chatId,
    genre: genre,
    suggestions: [],
    users: new Set()
  };

  botState.timers.bookCollection = setTimeout(() => {
    closeBookCollection(chatId);
  }, 5 * 60 * 1000);
}

// 11. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∫–Ω–∏–≥
bot.on('message', (msg) => {
  if (!msg.text || msg.chat.type !== 'private') return;
  
  const userId = msg.from.id;
  const text = msg.text.trim();

  if (!text.includes(' - ')) {
    return bot.sendMessage(msg.chat.id, '‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: "–ê–≤—Ç–æ—Ä - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏"');
  }

  if (!botState.userSuggestions[userId]) {
    botState.userSuggestions[userId] = [];
  }

  if (botState.userSuggestions[userId].length >= 2) {
    return bot.sendMessage(msg.chat.id, '‚ùå –í—ã —É–∂–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ 2 –∫–Ω–∏–≥–∏!');
  }

  botState.userSuggestions[userId].push(text);
  botState.bookSuggestions.suggestions.push(text);
  
  bot.sendMessage(msg.chat.id, `‚úÖ –ö–Ω–∏–≥–∞ "${text}" –ø—Ä–∏–Ω—è—Ç–∞!`);
});

// 12. –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –ø–æ –∫–Ω–∏–≥–∞–º
function closeBookCollection(chatId) {
  if (!botState.bookSuggestions) return;

  clearTimeout(botState.timers.bookCollection);
  
  const { suggestions, genre } = botState.bookSuggestions;
  
  if (suggestions.length < 2) {
    return bot.sendMessage(chatId, '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π!');
  }

  bot.sendPoll(
    chatId,
    `üìö –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∫–Ω–∏–≥—É (${genre}):`,
    suggestions,
    { is_anonymous: false, allows_multiple_answers: true }
  ).then(poll => {
    botState.bookPoll = {
      id: poll.poll.id,
      chatId: chatId,
      messageId: poll.message_id,
      suggestions: suggestions
    };

    botState.timers.bookPoll = setTimeout(() => {
      closeBookPoll(chatId);
    }, 5 * 60 * 1000);
  });
}

// 13. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
function closeBookPoll(chatId) {
  if (!botState.bookPoll) return;

  clearTimeout(botState.timers.bookPoll);
  
  bot.stopPoll(botState.bookPoll.chatId, botState.bookPoll.messageId)
    .then(poll => {
      let maxVotes = 0;
      let winner = '';
      
      poll.options.forEach((option, index) => {
        if (option.voter_count > maxVotes) {
          maxVotes = option.voter_count;
          winner = botState.bookPoll.suggestions[index];
        }
      });

      const message = maxVotes > 0
        ? `üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winner}`
        : '‚ùå –ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª!';
        
      bot.sendMessage(chatId, message);
    })
    .finally(() => {
      botState.bookPoll = null;
    });
}

// 14. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('polling_error', console.error);
bot.on('webhook_error', console.error);

// 15. –ü–∏–Ω–≥ –¥–ª—è Render (—á—Ç–æ–±—ã –Ω–µ –∑–∞—Å—ã–ø–∞–ª)
setInterval(() => {
  axios.get(`${process.env.RENDER_EXTERNAL_URL}/ping`)
    .catch(err => console.log('Ping error:', err.message));
}, 5 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');