require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const axios = require('axios');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Render
const app = express();
const PORT = process.env.PORT || 10000;

app.get('/', (req, res) => res.send('Book Club Bot is running'));
app.get('/ping', (req, res) => res.send('pong'));

const server = app.listen(PORT, '0.0.0.0', () => {
  console.log(`Server started on port ${PORT}`);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
const token = process.env.TELEGRAM_BOT_TOKEN;
const bot = new TelegramBot(token, {
  polling: {
    autoStart: false,
    params: { timeout: 30 }
  },
  request: {
    timeout: 20000
  }
});

// –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
const botState = {
  genrePoll: null,
  bookSuggestions: {},
  bookPoll: null,
  timers: {},
  userSuggestions: {},
};

// –ñ–∞–Ω—Ä—ã —Å —ç–º–æ–¥–∑–∏
const genres = [
  'üöÄ –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞',
  'üßô –§—ç–Ω—Ç–µ–∑–∏',
  'üïµÔ∏è –î–µ—Ç–µ–∫—Ç–∏–≤',
  'üî™ –¢—Ä–∏–ª–ª–µ—Ä',
  'üíò –†–æ–º–∞–Ω',
  'üëª –£–∂–∞—Å—ã',
  'üè∞ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π',
  'üìú –ë–∏–æ–≥—Ä–∞—Ñ–∏—è',
  'üî¨ –ù–∞—É—á–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞',
  'üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è',
  '‚úíÔ∏è –ü–æ—ç–∑–∏—è',
  'üó∫Ô∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è'
];

// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–Ω–∏–≥–∏
function isValidBookSuggestion(text) {
  return /^[^\-]{2,} - [^\-]{2,}$/.test(text) && 
         !/\d{3,}/.test(text.split(' - ')[0]); // –ë–ª–æ–∫–∏—Ä—É–µ–º —á–∏—Å–ª–∞ —Ç–∏–ø–∞ "319."
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
const startBot = () => {
  bot.startPolling()
    .then(() => console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ'))
    .catch(err => {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', err.message);
      setTimeout(startBot, 5000);
    });
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const name = msg.from.first_name;
  
  bot.sendMessage(chatId, 
    `üìö <b>–ü—Ä–∏–≤–µ—Ç, ${name}!</b> –Ø –±–æ—Ç –∫–Ω–∏–∂–Ω–æ–≥–æ –∫–ª—É–±–∞.\n\n` +
    '‚ú® <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n' +
    '/selectgenre - –í—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è\n' +
    '/help - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã\n\n' +
    'üìù <i>–§–æ—Ä–º–∞—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–Ω–∏–≥–∏:</i>\n' +
    '<code>–ê–≤—Ç–æ—Ä - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏</code>\n\n' +
    '‚è≥ –ö–∞–∂–¥–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç—Å—è 5 –º–∏–Ω—É—Ç', {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üöÄ –ù–∞—á–∞—Ç—å', callback_data: 'start_guide' }],
        [{ text: 'üìú –ü—Ä–∞–≤–∏–ª–∞', callback_data: 'show_rules' }]
      ]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
bot.on('callback_query', (query) => {
  const chatId = query.message.chat.id;
  
  switch(query.data) {
    case 'start_guide':
      bot.sendMessage(chatId, 
        '1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /selectgenre –≤ –≥—Ä—É–ø–ø–µ\n' +
        '2. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –∫–Ω–∏–≥—É –≤ –õ–° –±–æ—Ç–∞\n' +
        '3. –ì–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç');
      break;
      
    case 'show_rules':
      bot.sendMessage(chatId,
        'üìú <b>–ü—Ä–∞–≤–∏–ª–∞ –∫–Ω–∏–∂–Ω–æ–≥–æ –∫–ª—É–±–∞:</b>\n\n' +
        '‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞\n' +
        '‚Ä¢ –§–æ—Ä–º–∞—Ç: "–ê–≤—Ç–æ—Ä - –ù–∞–∑–≤–∞–Ω–∏–µ"\n' +
        '‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω—ã –¥–µ—Ç—Å–∫–∏–µ –∏ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ –∫–Ω–∏–≥–∏\n' +
        '‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç—Å—è 5 –º–∏–Ω—É—Ç', {
        parse_mode: 'HTML'
      });
      break;
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞
bot.onText(/\/selectgenre/, (msg) => {
  const chatId = msg.chat.id;
  
  if (botState.genrePoll) {
    return bot.sendMessage(chatId, '‚è≥ –û–ø—Ä–æ—Å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω! –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.');
  }

  bot.sendPoll(
    chatId,
    'üìö –í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∫–Ω–∏–≥–∏:',
    genres,
    { 
      is_anonymous: false, 
      allows_multiple_answers: false,
      explanation: '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç'
    }
  ).then(poll => {
    botState.genrePoll = {
      id: poll.poll.id,
      chatId: chatId,
      messageId: poll.message_id
    };

    botState.timers.genrePoll = setTimeout(() => {
      closeGenrePoll(chatId);
    }, 5 * 60 * 1000);

  }).catch(err => {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞:', err);
    bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  });
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–ø—Ä–æ—Å–∞ –∂–∞–Ω—Ä–æ–≤
function closeGenrePoll(chatId) {
  if (!botState.genrePoll) return;

  clearTimeout(botState.timers.genrePoll);
  
  bot.stopPoll(botState.genrePoll.chatId, botState.genrePoll.messageId)
    .then(poll => {
      const winner = poll.options.reduce((prev, current, index) => 
        (current.voter_count > prev.votes) ? 
          { genre: genres[index], votes: current.voter_count } : prev, 
        { genre: '', votes: 0 }
      );

      if (winner.votes === 0) {
        bot.sendMessage(chatId, '‚ùå –ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /selectgenre');
        return;
      }

      bot.sendMessage(
        chatId,
        `üéâ –í—ã–±—Ä–∞–Ω –∂–∞–Ω—Ä: <b>${winner.genre}</b>!\n\n` +
        '–¢–µ–ø–µ—Ä—å –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ –∫–Ω–∏–≥–∏ –≤ –õ–° –±–æ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
        '<code>–ê–≤—Ç–æ—Ä - –ù–∞–∑–≤–∞–Ω–∏–µ</code>\n\n' +
        '‚è≥ –£ –≤–∞—Å –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç!', {
        parse_mode: 'HTML'
      });

      startBookCollection(chatId, winner.genre);
    })
    .finally(() => {
      botState.genrePoll = null;
    });
}

// –°–±–æ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∫–Ω–∏–≥
function startBookCollection(chatId, genre) {
  botState.bookSuggestions = {
    chatId: chatId,
    genre: genre,
    suggestions: [],
    users: new Set()
  };

  botState.timers.bookCollection = setTimeout(() => {
    closeBookCollection(chatId);
  }, 5 * 60 * 1000);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∫–Ω–∏–≥
bot.on('message', (msg) => {
  if (!msg.text || msg.chat.type !== 'private') return;
  
  const userId = msg.from.id;
  const text = msg.text.trim();

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
  if (!isValidBookSuggestion(text)) {
    return bot.sendMessage(
      msg.chat.id,
      '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n\n' +
      '<code>–ê–≤—Ç–æ—Ä - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏</code>\n\n' +
      '‚Ä¢ –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã\n' +
      '‚Ä¢ –ë–µ–∑ –ª–∏—à–Ω–∏—Ö –¥–µ—Ñ–∏—Å–æ–≤\n' +
      '–ü—Ä–∏–º–µ—Ä: <code>–¢–æ–ª—Å—Ç–æ–π - –í–æ–π–Ω–∞ –∏ –º–∏—Ä</code>', {
      parse_mode: 'HTML'
    });
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (!botState.userSuggestions[userId]) {
    botState.userSuggestions[userId] = [];
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
  if (botState.userSuggestions[userId].length >= 2) {
    return bot.sendMessage(
      msg.chat.id,
      '‚ùå –í—ã —É–∂–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ 2 –∫–Ω–∏–≥–∏!\n' +
      '–î–æ–∂–¥–∏—Ç–µ—Å—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.'
    );
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
  const [author, title] = text.split(' - ').map(s => s.trim());
  const bookEntry = `${author} - ${title}`;
  
  botState.userSuggestions[userId].push(bookEntry);
  botState.bookSuggestions.suggestions.push(bookEntry);

  bot.sendMessage(
    msg.chat.id,
    `‚úÖ –ö–Ω–∏–≥–∞ "<i>${title}</i>" –ø—Ä–∏–Ω—è—Ç–∞!\n` +
    `–ê–≤—Ç–æ—Ä: <b>${author}</b>\n\n` +
    `–ú–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –µ—â—ë ${2 - botState.userSuggestions[userId].length} –∫–Ω–∏–≥.`, {
    parse_mode: 'HTML'
  });
});

// –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –ø–æ –∫–Ω–∏–≥–∞–º
function closeBookCollection(chatId) {
  if (!botState.bookSuggestions || botState.bookSuggestions.suggestions.length < 2) {
    return bot.sendMessage(
      chatId,
      '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!\n' +
      '–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Ä–∞–∑–Ω—ã–µ –∫–Ω–∏–≥–∏.'
    );
  }

  const { suggestions, genre } = botState.bookSuggestions;

  bot.sendPoll(
    chatId,
    `üìö –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∫–Ω–∏–≥—É (${genre}):`,
    suggestions,
    { 
      is_anonymous: false, 
      allows_multiple_answers: true,
      explanation: '–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤'
    }
  ).then(poll => {
    botState.bookPoll = {
      id: poll.poll.id,
      chatId: chatId,
      messageId: poll.message_id,
      suggestions: suggestions
    };

    botState.timers.bookPoll = setTimeout(() => {
      closeBookPoll(chatId);
    }, 5 * 60 * 1000);

  }).catch(err => {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞:', err);
    bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  });
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
function closeBookPoll(chatId) {
  if (!botState.bookPoll) return;

  clearTimeout(botState.timers.bookPoll);
  
  bot.stopPoll(botState.bookPoll.chatId, botState.bookPoll.messageId)
    .then(poll => {
      const results = poll.options.map((opt, idx) => ({
        book: botState.bookPoll.suggestions[idx],
        votes: opt.voter_count
      }));

      const winner = results.reduce((prev, curr) => 
        curr.votes > prev.votes ? curr : prev
      );

      if (winner.votes === 0) {
        bot.sendMessage(chatId, '‚ùå –ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /selectgenre');
        return;
      }

      bot.sendMessage(
        chatId,
        `üèÜ <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:</b>\n\n` +
        `<i>${winner.book}</i>\n\n` +
        `–ù–∞–±—Ä–∞–Ω–æ –≥–æ–ª–æ—Å–æ–≤: <b>${winner.votes}</b>\n\n` +
        `–°–ª–µ–¥—É—é—â–µ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü!`, {
        parse_mode: 'HTML'
      });
    })
    .finally(() => {
      botState.bookPoll = null;
      botState.bookSuggestions = {};
      botState.userSuggestions = {};
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
bot.on('polling_error', (err) => {
  console.error('Polling error:', err.message);
  if (err.code === 409) {
    setTimeout(startBot, 5000);
  }
});

bot.on('webhook_error', (err) => {
  console.error('Webhook error:', err);
});

// –ü–∏–Ω–≥ –¥–ª—è Render
setInterval(() => {
  axios.get(`${process.env.RENDER_EXTERNAL_URL}/ping`)
    .catch(err => console.log('Ping error:', err.message));
}, 5 * 60 * 1000);

// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
process.on('SIGTERM', () => {
  console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  bot.stopPolling();
  server.close(() => process.exit(0));
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
startBot();