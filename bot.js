const TelegramBot = require('node-telegram-bot-api');
const token = process.env.TELEGRAM_BOT_TOKEN; // –¢–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!

if (!token) {
  console.error('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!');
  console.error('1. –ü–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_BOT_TOKEN –≤ Render')
  process.exit(1);
}

//—ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(token, { polling: true});

// –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
const BOT_STATES = {
  IDLE: 'idle',
  GENRE_VOTING: 'genre_voting',
  BOOK_COLLECTING: 'book_collecting',
  BOOK_VOTING: 'book_voting'
};

// –î–∞–Ω–Ω—ã–µ –ø–æ —á–∞—Ç–∞–º
const chatData = {};

// –°–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤
const genres = [
  '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', '–§—ç–Ω—Ç–µ–∑–∏', '–î–µ—Ç–µ–∫—Ç–∏–≤', '–†–æ–º–∞–Ω', '–ù–æ–Ω-—Ñ–∏–∫—à–Ω',
  '–ë–∏–æ–≥—Ä–∞—Ñ–∏—è', '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π', '–¢—Ä–∏–ª–ª–µ—Ä', '–£–∂–∞—Å—ã', '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è'
];

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞
  if (!chatData[chatId]) {
    chatData[chatId] = {
      state: BOT_STATES.IDLE,
      genrePoll: null,
      bookPoll: null,
      genreVotes: {},
      bookVotes: {},
      suggestedBooks: [],
      timers: {}
    };
  }

  const data = chatData[chatId];

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
  if (msg.text && msg.text.startsWith('/')) {
    await handleCommand(chatId, msg);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–∏—á–∫–µ
bot.on('message', async (msg) => {
  if (msg.chat.type !== 'private') return;

  const userId = msg.from.id;
  const text = msg.text;

  // –ò—â–µ–º —á–∞—Ç, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–Ω–∏–≥—É
  for (const chatId in chatData) {
    const data = chatData[chatId];
    if (data.state === BOT_STATES.BOOK_COLLECTING) {
      await handlePrivateBookSuggestion(chatId, userId, text);
      return;
    }
  }

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Å–±–æ—Ä –∫–Ω–∏–≥
  bot.sendMessage(msg.chat.id, 
    '–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –∫–Ω–∏–≥. ' +
    '–î–æ–∂–¥–∏—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –≤ –≥—Ä—É–ø–ø–µ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω –∂–∞–Ω—Ä –∏ –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–Ω–∏–≥–∏.'
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞ –∂–∞–Ω—Ä–æ–≤
bot.on('polling_answer', (answer) => {
  const chatId = answer.chat.id;
  if (!chatData[chatId]) return;

  const data = chatData[chatId];
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å –∑–∞ –∂–∞–Ω—Ä
  if (data.state === BOT_STATES.GENRE_VOTING && answer.option_ids) {
    data.genreVotes[answer.user.id] = answer.option_ids[0];
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å –∑–∞ –∫–Ω–∏–≥—É
  if (data.state === BOT_STATES.BOOK_VOTING && answer.option_ids) {
    data.bookVotes[answer.user.id] = answer.option_ids[0];
  }
});

// –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞
async function handleCommand(chatId, msg) {
  const data = chatData[chatId];
  
  if (msg.text === '/start' && data.state === BOT_STATES.IDLE) {
    // –°–æ–∑–¥–∞–µ–º –æ–ø—Ä–æ—Å –ø–æ –≤—ã–±–æ—Ä—É –∂–∞–Ω—Ä–∞
    data.state = BOT_STATES.GENRE_VOTING;
    
    bot.sendPoll(
      chatId,
      '–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∫–Ω–∏–≥–∏:',
      genres,
      { is_anonymous: false }
    ).then((pollMsg) => {
      data.genrePoll = pollMsg.poll.id;
      
      // –¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –∂–∞–Ω—Ä (10 –º–∏–Ω—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∞)
      data.timers.genre = setTimeout(() => finishGenreVoting(chatId), 10 * 60 * 1000);
    });
  }
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –∂–∞–Ω—Ä
function finishGenreVoting(chatId) {
  const data = chatData[chatId];
  if (!data || data.state !== BOT_STATES.GENRE_VOTING) return;

  // –ü–æ–¥—Å—á–µ—Ç –≥–æ–ª–æ—Å–æ–≤
  const voteCount = Array(genres.length).fill(0);
  Object.values(data.genreVotes).forEach(option => {
    if (option >= 0 && option < genres.length) {
      voteCount[option]++;
    }
  });

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
  let winnerIndex = 0;
  let maxVotes = 0;
  voteCount.forEach((count, index) => {
    if (count > maxVotes) {
      maxVotes = count;
      winnerIndex = index;
    }
  });

  const winnerGenre = genres[winnerIndex];
  
  // –°–æ–æ–±—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  bot.sendMessage(
    chatId,
    `üèÜ –ü–æ –∏—Ç–æ–≥–∞–º –æ–ø—Ä–æ—Å–∞ –ø–æ–±–µ–¥–∏–ª –∂–∞–Ω—Ä: *${winnerGenre}*\n\n` +
    '–¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –º–æ–∂–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–Ω–∏–≥—É —ç—Ç–æ–≥–æ –∂–∞–Ω—Ä–∞.\n' +
    '–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
    '"–ê–≤—Ç–æ—Ä - –ù–∞–∑–≤–∞–Ω–∏–µ" –∏–ª–∏ "–ê–≤—Ç–æ—Ä-–ù–∞–∑–≤–∞–Ω–∏–µ"\n\n' +
    '–£ –≤–∞—Å –µ—Å—Ç—å 10 –º–∏–Ω—É—Ç!',
    { parse_mode: 'Markdown' }
  );

  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —Å–±–æ—Ä–∞ –∫–Ω–∏–≥
  data.state = BOT_STATES.BOOK_COLLECTING;
  data.winnerGenre = winnerGenre;
  data.suggestedBooks = [];
  
  // –¢–∞–π–º–µ—Ä —Å–±–æ—Ä–∞ –∫–Ω–∏–≥ (10 –º–∏–Ω—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∞)
  data.timers.books = setTimeout(() => finishBookCollection(chatId), 10 * 60 * 1000);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∫–Ω–∏–≥ –≤ –ª–∏—á–∫–µ
async function handlePrivateBookSuggestion(chatId, userId, text) {
  const data = chatData[chatId];
  if (!data || data.state !== BOT_STATES.BOOK_COLLECTING) return;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
  const bookPattern = /^(.+?)\s*[-‚Äî]\s*(.+)$/;
  const match = text.match(bookPattern);
  
  if (!match) {
    bot.sendMessage(
      userId,
      '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n' +
      '"–ê–≤—Ç–æ—Ä - –ù–∞–∑–≤–∞–Ω–∏–µ" –∏–ª–∏ "–ê–≤—Ç–æ—Ä-–ù–∞–∑–≤–∞–Ω–∏–µ"'
    );
    return;
  }

  const author = match[1].trim();
  const title = match[2].trim();
  const book = `${author} - ${title}`;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
  if (data.suggestedBooks.some(b => b.toLowerCase() === book.toLowerCase())) {
    bot.sendMessage(userId, '‚ùå –≠—Ç–∞ –∫–Ω–∏–≥–∞ —É–∂–µ –±—ã–ª–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞!');
    return;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É
  data.suggestedBooks.push(book);
  bot.sendMessage(userId, `‚úÖ –ö–Ω–∏–≥–∞ "${book}" –¥–æ–±–∞–≤–ª–µ–Ω–∞!`);
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–±–æ—Ä–∞ –∫–Ω–∏–≥
function finishBookCollection(chatId) {
  const data = chatData[chatId];
  if (!data || data.state !== BOT_STATES.BOOK_COLLECTING) return;

  if (data.suggestedBooks.length < 2) {
    bot.sendMessage(
      chatId,
      '‚è≥ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–Ω–∏–≥.\n' +
      `–ü–æ–ª—É—á–µ–Ω–æ –∫–Ω–∏–≥: ${data.suggestedBooks.length}\n\n` +
      '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞.'
    );
    data.state = BOT_STATES.IDLE;
    return;
  }

  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é –∑–∞ –∫–Ω–∏–≥–∏
  data.state = BOT_STATES.BOOK_VOTING;
  
  bot.sendMessage(
    chatId,
    `üìö –í—ã–±–∏—Ä–∞–µ–º –∫–Ω–∏–≥—É –≤ –∂–∞–Ω—Ä–µ ${data.winnerGenre} –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:`
  );

  // –°–æ–∑–¥–∞–µ–º –æ–ø—Ä–æ—Å
  bot.sendPoll(
    chatId,
    `–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∫–Ω–∏–≥—É –≤ –∂–∞–Ω—Ä–µ ${data.winnerGenre}:`,
    data.suggestedBooks,
    { is_anonymous: false }
  ).then(() => {
    // –¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (10 –º–∏–Ω—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∞)
    data.timers.bookVoting = setTimeout(() => finishBookVoting(chatId), 10 * 60 * 1000);
  });
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –∫–Ω–∏–≥—É
function finishBookVoting(chatId) {
  const data = chatData[chatId];
  if (!data || data.state !== BOT_STATES.BOOK_VOTING) return;

  // –ü–æ–¥—Å—á–µ—Ç –≥–æ–ª–æ—Å–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
  const voteCount = Array(data.suggestedBooks.length).fill(0);
  Object.values(data.bookVotes).forEach(userVote => {
    if (userVote !== undefined && userVote >= 0 && userVote < voteCount.length) {
      voteCount[userVote]++;
    }
  });

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
  let winnerIndex = 0;
  let maxVotes = 0;
  voteCount.forEach((count, index) => {
    if (count > maxVotes) {
      maxVotes = count;
      winnerIndex = index;
    }
  });

  const winnerBook = data.suggestedBooks[winnerIndex];

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∫–ª–æ–Ω–µ–Ω–∏–µ–º)
  const results = data.suggestedBooks.map((book, index) => {
    const votes = voteCount[index];
    const votesText = votes === 1 ? '–≥–æ–ª–æ—Å' : votes === 0 ? '–≥–æ–ª–æ—Å–æ–≤' : '–≥–æ–ª–æ—Å–∞';
    return `${index + 1}. ${book} - ${votes} ${votesText}`;
  }).join('\n');

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  bot.sendMessage(
    chatId,
    `üèÜ *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è*:\n\n` +
    `–ü–æ–±–µ–¥–∏–ª–∞ –∫–Ω–∏–≥–∞: *${winnerBook}*\n\n` +
    `–í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n${results}`,
    { parse_mode: 'Markdown' }
  );

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  data.state = BOT_STATES.IDLE;
  data.bookVotes = {}; // –û—á–∏—â–∞–µ–º –≥–æ–ª–æ—Å–∞
}